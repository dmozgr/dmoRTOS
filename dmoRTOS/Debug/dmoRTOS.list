
dmoRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000804  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009ac  080009ac  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009ac  080009ac  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080009ac  080009ac  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009ac  080009ac  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009ac  080009ac  000109ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009b0  080009b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080009b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000190  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a34  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000601  00000000  00000000  00020af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000160  00000000  00000000  000210f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ed  00000000  00000000  00021258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001911c  00000000  00000000  00021345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002039  00000000  00000000  0003a461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008b90a  00000000  00000000  0003c49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000006a0  00000000  00000000  000c7da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000c8444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000050 	.word	0x20000050
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000994 	.word	0x08000994

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000054 	.word	0x20000054
 80001e4:	08000994 	.word	0x08000994

080001e8 <vPortTaskStackInit>:
void vPortTaskStackInit(taskcontrolblock_t *task ,int32_t programCounter);
void vPortSchedulerLaunch();
uint8_t vPortSetupTimerInterrupt();

void vPortTaskStackInit(taskcontrolblock_t *task ,int32_t programCounter)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
	task->stack[STACK_SIZE - 2] = programCounter;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	task->tcb->stackPt = &task->stack[STACK_SIZE - 16];
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	f502 72aa 	add.w	r2, r2, #340	; 0x154
 8000206:	601a      	str	r2, [r3, #0]
	task->stack[STACK_SIZE - 1] = ( 1U << 24 ); /* PSR */
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800020e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

	task->stack[STACK_SIZE - 3] = 0x12345603;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <vPortTaskStackInit+0xa8>)
 8000216:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	task->stack[STACK_SIZE - 4] = 0x12345604;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <vPortTaskStackInit+0xac>)
 800021e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	task->stack[STACK_SIZE - 5] = 0x12345605;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <vPortTaskStackInit+0xb0>)
 8000226:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	task->stack[STACK_SIZE - 6] = 0x12345606;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <vPortTaskStackInit+0xb4>)
 800022e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	task->stack[STACK_SIZE - 7] = 0x12345607;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <vPortTaskStackInit+0xb8>)
 8000236:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	task->stack[STACK_SIZE - 8] = 0x12345608;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <vPortTaskStackInit+0xbc>)
 800023e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	task->stack[STACK_SIZE - 9] = 0x12345609;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <vPortTaskStackInit+0xc0>)
 8000246:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	task->stack[STACK_SIZE - 10] = 0x12345610;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <vPortTaskStackInit+0xc4>)
 800024e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	task->stack[STACK_SIZE - 11] = 0x12345611;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <vPortTaskStackInit+0xc8>)
 8000256:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	task->stack[STACK_SIZE - 12] = 0x12345612;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <vPortTaskStackInit+0xcc>)
 800025e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	task->stack[STACK_SIZE - 13] = 0x12345613;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <vPortTaskStackInit+0xd0>)
 8000266:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	task->stack[STACK_SIZE - 14] = 0x12345614;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <vPortTaskStackInit+0xd4>)
 800026e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	task->stack[STACK_SIZE - 15] = 0x12345615;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <vPortTaskStackInit+0xd8>)
 8000276:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	task->stack[STACK_SIZE - 16] = 0x12345616;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <vPortTaskStackInit+0xdc>)
 800027e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	12345603 	.word	0x12345603
 8000294:	12345604 	.word	0x12345604
 8000298:	12345605 	.word	0x12345605
 800029c:	12345606 	.word	0x12345606
 80002a0:	12345607 	.word	0x12345607
 80002a4:	12345608 	.word	0x12345608
 80002a8:	12345609 	.word	0x12345609
 80002ac:	12345610 	.word	0x12345610
 80002b0:	12345611 	.word	0x12345611
 80002b4:	12345612 	.word	0x12345612
 80002b8:	12345613 	.word	0x12345613
 80002bc:	12345614 	.word	0x12345614
 80002c0:	12345615 	.word	0x12345615
 80002c4:	12345616 	.word	0x12345616

080002c8 <xPortTaskCreate>:

//void BOÅžTABEKLEMEFONKSIYONU

uint8_t xPortTaskCreate( void(*funcPt)(void), uint16_t period)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	807b      	strh	r3, [r7, #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
}
 80002d6:	bf00      	nop
	__disable_irq();
	taskcontrolblock_t* newTask = (taskcontrolblock_t*)malloc(sizeof(taskcontrolblock_t));
 80002d8:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 80002dc:	f000 fa6a 	bl	80007b4 <malloc>
 80002e0:	4603      	mov	r3, r0
 80002e2:	617b      	str	r3, [r7, #20]

	if(taskList == NULL)
 80002e4:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <xPortTaskCreate+0xd0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d12a      	bne.n	8000342 <xPortTaskCreate+0x7a>
	{
		tcb_t *newTcb = (tcb_t*)malloc(sizeof(tcb_t));
 80002ec:	2004      	movs	r0, #4
 80002ee:	f000 fa61 	bl	80007b4 <malloc>
 80002f2:	4603      	mov	r3, r0
 80002f4:	60fb      	str	r3, [r7, #12]
		newTask->tcb = newTcb;
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		vPortTaskStackInit(newTask, (uint32_t)(funcPt));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4619      	mov	r1, r3
 8000302:	6978      	ldr	r0, [r7, #20]
 8000304:	f7ff ff70 	bl	80001e8 <vPortTaskStackInit>
		currentTask = newTask;
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <xPortTaskCreate+0xd4>)
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	6013      	str	r3, [r2, #0]
		newTask->sleepTime = 0;
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	2200      	movs	r2, #0
 8000312:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		newTask->state = BLOCKED;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	2202      	movs	r2, #2
 800031a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
		newTask->period = period;
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	887a      	ldrh	r2, [r7, #2]
 8000322:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
		newTask->programCounter = funcPt;
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		newTask->nextTask = newTask;
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	601a      	str	r2, [r3, #0]
		taskList = newTask;
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <xPortTaskCreate+0xd0>)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	6013      	str	r3, [r2, #0]
		xPortCreateIdleHookTask(&xPortIdleHook);
 800033a:	4819      	ldr	r0, [pc, #100]	; (80003a0 <xPortTaskCreate+0xd8>)
 800033c:	f000 f926 	bl	800058c <xPortCreateIdleHookTask>
 8000340:	e022      	b.n	8000388 <xPortTaskCreate+0xc0>
	}
	else
	{
		tcb_t *newTcb = (tcb_t*)malloc(sizeof(tcb_t));
 8000342:	2004      	movs	r0, #4
 8000344:	f000 fa36 	bl	80007b4 <malloc>
 8000348:	4603      	mov	r3, r0
 800034a:	613b      	str	r3, [r7, #16]
		newTask->tcb = newTcb;
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		vPortTaskStackInit(newTask, (uint32_t)(funcPt));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4619      	mov	r1, r3
 8000358:	6978      	ldr	r0, [r7, #20]
 800035a:	f7ff ff45 	bl	80001e8 <vPortTaskStackInit>
		newTask->state = BLOCKED;
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2202      	movs	r2, #2
 8000362:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
		newTask->programCounter = funcPt;
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		newTask->period = period;
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	887a      	ldrh	r2, [r7, #2]
 8000372:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
		newTask->nextTask = taskList->nextTask;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <xPortTaskCreate+0xd0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]
		taskList->nextTask = newTask;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <xPortTaskCreate+0xd0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000388:	b662      	cpsie	i
}
 800038a:	bf00      	nop
	}

	__enable_irq();
	return 1;
 800038c:	2301      	movs	r3, #1
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000070 	.word	0x20000070
 800039c:	2000006c 	.word	0x2000006c
 80003a0:	08000579 	.word	0x08000579

080003a4 <vPortSetupTimerInterrupt>:

uint8_t vPortSetupTimerInterrupt()
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	/* SysTick Timeri durdur ve temizle */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <vPortSetupTimerInterrupt+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <vPortSetupTimerInterrupt+0x44>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]

	/* SysTick timer'a istenilen zamanda interrupt uretebilmesi icin load degerini yukle */
	portNVIC_SYSTICK_LOAD_REG = configQUANTA * ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <vPortSetupTimerInterrupt+0x48>)
 80003b6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003ba:	601a      	str	r2, [r3, #0]

	portNVIC_SYSPRI3_REG = (portNVIC_SYSPRI3_REG&0x00FFFFFF)|0xE0000000; // priority 7
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <vPortSetupTimerInterrupt+0x4c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <vPortSetupTimerInterrupt+0x4c>)
 80003c6:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80003ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <vPortSetupTimerInterrupt+0x40>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003d2:	b662      	cpsie	i
}
 80003d4:	bf00      	nop

	__enable_irq();
	return 1;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	e000e018 	.word	0xe000e018
 80003ec:	e000e014 	.word	0xe000e014
 80003f0:	e000ed20 	.word	0xe000ed20

080003f4 <vPortSchedulerLaunch>:

void vPortSchedulerLaunch()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	//do {
	//temp->tcb->nextPt = temp->nextTask->tcb;
	//temp = temp->nextTask;
	//} while (temp != taskList->nextTask);

	currentPt = currentTask->tcb;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <vPortSchedulerLaunch+0x38>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <vPortSchedulerLaunch+0x3c>)
 8000402:	6013      	str	r3, [r2, #0]
	__asm("LDR R0,=currentPt");
 8000404:	480b      	ldr	r0, [pc, #44]	; (8000434 <vPortSchedulerLaunch+0x40>)
	__asm("LDR R2,[r0]");
 8000406:	6802      	ldr	r2, [r0, #0]
	__asm("LDR SP,[R2]");
 8000408:	f8d2 d000 	ldr.w	sp, [r2]
	__asm("POP {R4-R11}");
 800040c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("POP {R12}");
 8000410:	f85d cb04 	ldr.w	ip, [sp], #4
	__asm("POP {R0-R3}");
 8000414:	bc0f      	pop	{r0, r1, r2, r3}
	__asm("ADD SP,SP,#4");
 8000416:	b001      	add	sp, #4
	__asm("POP {LR}");
 8000418:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm("ADD SP,SP,#4");
 800041c:	b001      	add	sp, #4
	__asm("CPSIE 	I");
 800041e:	b662      	cpsie	i

	/* Task fonksiyonuna dÃ¶n */
	__asm("BX	LR");
 8000420:	4770      	bx	lr
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	2000006c 	.word	0x2000006c
 8000430:	20000074 	.word	0x20000074
 8000434:	20000074 	.word	0x20000074

08000438 <deneme>:

void deneme()
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	taskcontrolblock_t *temp = taskList;
 800043e:	4b30      	ldr	r3, [pc, #192]	; (8000500 <deneme+0xc8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	607b      	str	r3, [r7, #4]
//			currentPt = currentTask->tcb;
//			goto exit;
//		}
//	}while( temp != taskList->nextTask);

	if( taskList != NULL )
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <deneme+0xc8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d028      	beq.n	800049e <deneme+0x66>
	{
		do{
			if( temp->state != READY )
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000452:	2b00      	cmp	r3, #0
 8000454:	d01b      	beq.n	800048e <deneme+0x56>
			{
				if( (temp->sleepTime <= temp->period))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	f8b2 21a4 	ldrh.w	r2, [r2, #420]	; 0x1a4
 8000462:	4293      	cmp	r3, r2
 8000464:	d80b      	bhi.n	800047e <deneme+0x46>
				{
					temp->sleepTime += configQUANTA;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
					temp->state = BLOCKED;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2202      	movs	r2, #2
 8000478:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 800047c:	e007      	b.n	800048e <deneme+0x56>
				}
				else{
					temp->sleepTime = 0;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
					temp->state = READY;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
				}
			}
			temp = temp->nextTask;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	607b      	str	r3, [r7, #4]

		} while(temp != taskList);
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <deneme+0xc8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	429a      	cmp	r2, r3
 800049c:	d1d6      	bne.n	800044c <deneme+0x14>
	}

	temp = taskList;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <deneme+0xc8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	607b      	str	r3, [r7, #4]

	do{
		if( temp->state == READY )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d10e      	bne.n	80004cc <deneme+0x94>
		{
			currentTask = temp;
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <deneme+0xcc>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6013      	str	r3, [r2, #0]
			currentTask->state = RUNNING;
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <deneme+0xcc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2201      	movs	r2, #1
 80004ba:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
			currentPt = currentTask->tcb;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <deneme+0xcc>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <deneme+0xd0>)
 80004c8:	6013      	str	r3, [r2, #0]
			goto exit;
 80004ca:	e011      	b.n	80004f0 <deneme+0xb8>
		}
		temp = temp->nextTask;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	607b      	str	r3, [r7, #4]
	} while( temp != taskList);
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <deneme+0xc8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d1e3      	bne.n	80004a4 <deneme+0x6c>

	currentTask = idleTask;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <deneme+0xd4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <deneme+0xcc>)
 80004e2:	6013      	str	r3, [r2, #0]
	currentPt = idleTask->tcb;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <deneme+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <deneme+0xd0>)
 80004ee:	6013      	str	r3, [r2, #0]

	exit:
		__asm("nop");
 80004f0:	bf00      	nop
//		currentTask = currentTask->nextTask;
//		xPortTaskYield();
//	}
//	currentPt = currentTask->tcb;
//	currentTask = currentTask->nextTask;
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000070 	.word	0x20000070
 8000504:	2000006c 	.word	0x2000006c
 8000508:	20000074 	.word	0x20000074
 800050c:	20000078 	.word	0x20000078

08000510 <SysTick_Handler>:

__attribute__((naked)) void xPortSysTickHandler( void )
{
	// Kesmeleri devre dÄ±ÅŸÄ± bÄ±rak
	__asm("CPSID I");
 8000510:	b672      	cpsid	i

	// Kaydet r4,r5,r6,r7,r8,r9,r10,r11
	__asm("PUSH {R4-R11}");
 8000512:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// R0'a currentPt'yi yÃ¼kle
	__asm("LDR R0,=currentPt");
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <SysTick_Handler+0x28>)
	__asm("LDR R1,[R0]");
 8000518:	6801      	ldr	r1, [r0, #0]
	__asm("STR SP,[R1]");
 800051a:	f8c1 d000 	str.w	sp, [r1]

	// r1'i, currentPt'nin 4 byte Ã¼stÃ¼ndeki adres noktasÄ±ndan yÃ¼kle, yani r1 = currentPt -> nextPt


	__asm("PUSH {R0,LR}");
 800051e:	b501      	push	{r0, lr}
	__asm("BL deneme");
 8000520:	f7ff ff8a 	bl	8000438 <deneme>
	__asm("POP {R0,LR}");
 8000524:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
	__asm("LDR R1,[R0]");
 8000528:	6801      	ldr	r1, [r0, #0]
	//__asm("LDR R1,=tmp");
	//__asm("STR R1,[R0]");

	// SP'yi r1'den yÃ¼kle
	__asm("LDR SP,[R1]");
 800052a:	f8d1 d000 	ldr.w	sp, [r1]

	// r4,r5,r6,r7,r8,r9,r10,r11'i geri yÃ¼kle
	__asm("POP {R4-R11}");
 800052e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Global kesmeleri etkinleÅŸtir
	__asm("CPSIE I");
 8000532:	b662      	cpsie	i

	// kesmeden dÃ¶n
	__asm("BX LR");
 8000534:	4770      	bx	lr
}
 8000536:	bf00      	nop
 8000538:	20000074 	.word	0x20000074

0800053c <xPortSchedulerStart>:

void xPortSchedulerStart()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	vPortSetupTimerInterrupt();
 8000540:	f7ff ff30 	bl	80003a4 <vPortSetupTimerInterrupt>
	vPortSchedulerLaunch();
 8000544:	f7ff ff56 	bl	80003f4 <vPortSchedulerLaunch>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <xPortTaskWait>:
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0x00;
	portNVIC_INTCTRL = 0x04000000;	// Trigger Systick
}

void xPortTaskWait()
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	currentTask->state = BLOCKED;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <xPortTaskWait+0x28>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2202      	movs	r2, #2
 8000556:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
	while(currentTask->state == BLOCKED);
 800055a:	bf00      	nop
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <xPortTaskWait+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000564:	2b02      	cmp	r3, #2
 8000566:	d0f9      	beq.n	800055c <xPortTaskWait+0x10>
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	2000006c 	.word	0x2000006c

08000578 <xPortIdleHook>:

uint32_t idleHookTick = 0;

void xPortIdleHook(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	while(1)
	{
		idleHookTick++;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <xPortIdleHook+0x10>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a01      	ldr	r2, [pc, #4]	; (8000588 <xPortIdleHook+0x10>)
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e7f9      	b.n	800057c <xPortIdleHook+0x4>
 8000588:	2000007c 	.word	0x2000007c

0800058c <xPortCreateIdleHookTask>:
	}
}

static void xPortCreateIdleHookTask(void(*funcPt)(void))
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	idleTask = (taskcontrolblock_t*)malloc(sizeof(taskcontrolblock_t));
 8000594:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 8000598:	f000 f90c 	bl	80007b4 <malloc>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005a2:	601a      	str	r2, [r3, #0]

	tcb_t *newTcb = (tcb_t*)malloc(sizeof(tcb_t));
 80005a4:	2004      	movs	r0, #4
 80005a6:	f000 f905 	bl	80007b4 <malloc>
 80005aa:	4603      	mov	r3, r0
 80005ac:	60fb      	str	r3, [r7, #12]
	idleTask->tcb = newTcb;
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	vPortTaskStackInit(idleTask, (uint32_t)(funcPt));
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe11 	bl	80001e8 <vPortTaskStackInit>
	idleTask->sleepTime = 0;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2200      	movs	r2, #0
 80005cc:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	idleTask->state = IDLE;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2203      	movs	r2, #3
 80005d6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
	idleTask->period = 0;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <xPortCreateIdleHookTask+0x60>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000078 	.word	0x20000078

080005f0 <xSemaphoreCreate>:
 */
#include "semphr.h"
#include "ST/STM32F4xx/Include/stm32f407xx.h"

semaphore_t xSemaphoreCreate(int initCount)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	semaphore_t semphr;
	semphr.count = initCount;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	60fb      	str	r3, [r7, #12]
}
 80005fc:	bf00      	nop
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <xTaskCreate>:
#include "task.h"
#include "portable.h"

void xTaskCreate(void(*funcPt)(void), uint16_t period)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	807b      	strh	r3, [r7, #2]
	xPortTaskCreate(funcPt, period);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe54 	bl	80002c8 <xPortTaskCreate>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <xTaskStartScheduler>:
void xTaskStartScheduler( void )
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	xPortSchedulerStart();
 800062c:	f7ff ff86 	bl	800053c <xPortSchedulerStart>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <xTaskWait>:
{
	xPortTaskYield(  );
}

void xTaskWait( void )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	xPortTaskWait();
 8000638:	f7ff ff88 	bl	800054c <xPortTaskWait>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <task0>:

semaphore_t semphr_1;


void task0(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	while(1)
	{
		task0_profiler++;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <task0+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a02      	ldr	r2, [pc, #8]	; (8000654 <task0+0x14>)
 800064c:	6013      	str	r3, [r2, #0]
		xTaskWait();
 800064e:	f7ff fff1 	bl	8000634 <xTaskWait>
		task0_profiler++;
 8000652:	e7f7      	b.n	8000644 <task0+0x4>
 8000654:	20000080 	.word	0x20000080

08000658 <task1>:
	}
}
void task1(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	while(1)
	{
		task1_profiler++;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <task1+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a02      	ldr	r2, [pc, #8]	; (800066c <task1+0x14>)
 8000664:	6013      	str	r3, [r2, #0]
		xTaskWait();
 8000666:	f7ff ffe5 	bl	8000634 <xTaskWait>
		task1_profiler++;
 800066a:	e7f7      	b.n	800065c <task1+0x4>
 800066c:	20000084 	.word	0x20000084

08000670 <task2>:
	}
}
void task2(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	while(1)
	{
		task2_profiler++;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <task2+0x14>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a02      	ldr	r2, [pc, #8]	; (8000684 <task2+0x14>)
 800067c:	6013      	str	r3, [r2, #0]
		xTaskWait();
 800067e:	f7ff ffd9 	bl	8000634 <xTaskWait>
		task2_profiler++;
 8000682:	e7f7      	b.n	8000674 <task2+0x4>
 8000684:	20000088 	.word	0x20000088

08000688 <task3>:
	}
}

void task3(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	while(1)
	{
		task3_profiler++;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <task3+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a02      	ldr	r2, [pc, #8]	; (800069c <task3+0x14>)
 8000694:	6013      	str	r3, [r2, #0]
		xTaskWait();
 8000696:	f7ff ffcd 	bl	8000634 <xTaskWait>
		task3_profiler++;
 800069a:	e7f7      	b.n	800068c <task3+0x4>
 800069c:	2000008c 	.word	0x2000008c

080006a0 <main>:
	}
}

int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	semphr_1 = xSemaphoreCreate(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ffa3 	bl	80005f0 <xSemaphoreCreate>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <main+0x40>)
 80006ae:	6013      	str	r3, [r2, #0]

	xTaskCreate(&task0, 500);
 80006b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <main+0x44>)
 80006b6:	f7ff ffa8 	bl	800060a <xTaskCreate>
	xTaskCreate(&task1, 50);
 80006ba:	2132      	movs	r1, #50	; 0x32
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x48>)
 80006be:	f7ff ffa4 	bl	800060a <xTaskCreate>
	xTaskCreate(&task2, 3000);
 80006c2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <main+0x4c>)
 80006c8:	f7ff ff9f 	bl	800060a <xTaskCreate>
	xTaskCreate(&task3, 1);
 80006cc:	2101      	movs	r1, #1
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <main+0x50>)
 80006d0:	f7ff ff9b 	bl	800060a <xTaskCreate>

	xTaskStartScheduler();
 80006d4:	f7ff ffa8 	bl	8000628 <xTaskStartScheduler>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000090 	.word	0x20000090
 80006e4:	08000641 	.word	0x08000641
 80006e8:	08000659 	.word	0x08000659
 80006ec:	08000671 	.word	0x08000671
 80006f0:	08000689 	.word	0x08000689

080006f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <_sbrk+0x5c>)
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <_sbrk+0x60>)
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <_sbrk+0x64>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <_sbrk+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d207      	bcs.n	8000734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000724:	f000 f90a 	bl	800093c <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	e009      	b.n	8000748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <_sbrk+0x64>)
 8000744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20020000 	.word	0x20020000
 8000754:	00000400 	.word	0x00000400
 8000758:	20000094 	.word	0x20000094
 800075c:	200001e0 	.word	0x200001e0

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078e:	f000 f8db 	bl	8000948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff ff85 	bl	80006a0 <main>

08000796 <LoopForever>:

LoopForever:
  b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80007a4:	080009b4 	.word	0x080009b4
  ldr r2, =_sbss
 80007a8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80007ac:	200001e0 	.word	0x200001e0

080007b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>
	...

080007b4 <malloc>:
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <malloc+0xc>)
 80007b6:	4601      	mov	r1, r0
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f000 b823 	b.w	8000804 <_malloc_r>
 80007be:	bf00      	nop
 80007c0:	2000004c 	.word	0x2000004c

080007c4 <sbrk_aligned>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	4e0e      	ldr	r6, [pc, #56]	; (8000800 <sbrk_aligned+0x3c>)
 80007c8:	460c      	mov	r4, r1
 80007ca:	6831      	ldr	r1, [r6, #0]
 80007cc:	4605      	mov	r5, r0
 80007ce:	b911      	cbnz	r1, 80007d6 <sbrk_aligned+0x12>
 80007d0:	f000 f8a4 	bl	800091c <_sbrk_r>
 80007d4:	6030      	str	r0, [r6, #0]
 80007d6:	4621      	mov	r1, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f89f 	bl	800091c <_sbrk_r>
 80007de:	1c43      	adds	r3, r0, #1
 80007e0:	d00a      	beq.n	80007f8 <sbrk_aligned+0x34>
 80007e2:	1cc4      	adds	r4, r0, #3
 80007e4:	f024 0403 	bic.w	r4, r4, #3
 80007e8:	42a0      	cmp	r0, r4
 80007ea:	d007      	beq.n	80007fc <sbrk_aligned+0x38>
 80007ec:	1a21      	subs	r1, r4, r0
 80007ee:	4628      	mov	r0, r5
 80007f0:	f000 f894 	bl	800091c <_sbrk_r>
 80007f4:	3001      	adds	r0, #1
 80007f6:	d101      	bne.n	80007fc <sbrk_aligned+0x38>
 80007f8:	f04f 34ff 	mov.w	r4, #4294967295
 80007fc:	4620      	mov	r0, r4
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	2000009c 	.word	0x2000009c

08000804 <_malloc_r>:
 8000804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000808:	1ccd      	adds	r5, r1, #3
 800080a:	f025 0503 	bic.w	r5, r5, #3
 800080e:	3508      	adds	r5, #8
 8000810:	2d0c      	cmp	r5, #12
 8000812:	bf38      	it	cc
 8000814:	250c      	movcc	r5, #12
 8000816:	2d00      	cmp	r5, #0
 8000818:	4607      	mov	r7, r0
 800081a:	db01      	blt.n	8000820 <_malloc_r+0x1c>
 800081c:	42a9      	cmp	r1, r5
 800081e:	d905      	bls.n	800082c <_malloc_r+0x28>
 8000820:	230c      	movs	r3, #12
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	2600      	movs	r6, #0
 8000826:	4630      	mov	r0, r6
 8000828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800082c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000900 <_malloc_r+0xfc>
 8000830:	f000 f868 	bl	8000904 <__malloc_lock>
 8000834:	f8d8 3000 	ldr.w	r3, [r8]
 8000838:	461c      	mov	r4, r3
 800083a:	bb5c      	cbnz	r4, 8000894 <_malloc_r+0x90>
 800083c:	4629      	mov	r1, r5
 800083e:	4638      	mov	r0, r7
 8000840:	f7ff ffc0 	bl	80007c4 <sbrk_aligned>
 8000844:	1c43      	adds	r3, r0, #1
 8000846:	4604      	mov	r4, r0
 8000848:	d155      	bne.n	80008f6 <_malloc_r+0xf2>
 800084a:	f8d8 4000 	ldr.w	r4, [r8]
 800084e:	4626      	mov	r6, r4
 8000850:	2e00      	cmp	r6, #0
 8000852:	d145      	bne.n	80008e0 <_malloc_r+0xdc>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d048      	beq.n	80008ea <_malloc_r+0xe6>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	4631      	mov	r1, r6
 800085c:	4638      	mov	r0, r7
 800085e:	eb04 0903 	add.w	r9, r4, r3
 8000862:	f000 f85b 	bl	800091c <_sbrk_r>
 8000866:	4581      	cmp	r9, r0
 8000868:	d13f      	bne.n	80008ea <_malloc_r+0xe6>
 800086a:	6821      	ldr	r1, [r4, #0]
 800086c:	1a6d      	subs	r5, r5, r1
 800086e:	4629      	mov	r1, r5
 8000870:	4638      	mov	r0, r7
 8000872:	f7ff ffa7 	bl	80007c4 <sbrk_aligned>
 8000876:	3001      	adds	r0, #1
 8000878:	d037      	beq.n	80008ea <_malloc_r+0xe6>
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	442b      	add	r3, r5
 800087e:	6023      	str	r3, [r4, #0]
 8000880:	f8d8 3000 	ldr.w	r3, [r8]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d038      	beq.n	80008fa <_malloc_r+0xf6>
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	42a2      	cmp	r2, r4
 800088c:	d12b      	bne.n	80008e6 <_malloc_r+0xe2>
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	e00f      	b.n	80008b4 <_malloc_r+0xb0>
 8000894:	6822      	ldr	r2, [r4, #0]
 8000896:	1b52      	subs	r2, r2, r5
 8000898:	d41f      	bmi.n	80008da <_malloc_r+0xd6>
 800089a:	2a0b      	cmp	r2, #11
 800089c:	d917      	bls.n	80008ce <_malloc_r+0xca>
 800089e:	1961      	adds	r1, r4, r5
 80008a0:	42a3      	cmp	r3, r4
 80008a2:	6025      	str	r5, [r4, #0]
 80008a4:	bf18      	it	ne
 80008a6:	6059      	strne	r1, [r3, #4]
 80008a8:	6863      	ldr	r3, [r4, #4]
 80008aa:	bf08      	it	eq
 80008ac:	f8c8 1000 	streq.w	r1, [r8]
 80008b0:	5162      	str	r2, [r4, r5]
 80008b2:	604b      	str	r3, [r1, #4]
 80008b4:	4638      	mov	r0, r7
 80008b6:	f104 060b 	add.w	r6, r4, #11
 80008ba:	f000 f829 	bl	8000910 <__malloc_unlock>
 80008be:	f026 0607 	bic.w	r6, r6, #7
 80008c2:	1d23      	adds	r3, r4, #4
 80008c4:	1af2      	subs	r2, r6, r3
 80008c6:	d0ae      	beq.n	8000826 <_malloc_r+0x22>
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	50a3      	str	r3, [r4, r2]
 80008cc:	e7ab      	b.n	8000826 <_malloc_r+0x22>
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	6862      	ldr	r2, [r4, #4]
 80008d2:	d1dd      	bne.n	8000890 <_malloc_r+0x8c>
 80008d4:	f8c8 2000 	str.w	r2, [r8]
 80008d8:	e7ec      	b.n	80008b4 <_malloc_r+0xb0>
 80008da:	4623      	mov	r3, r4
 80008dc:	6864      	ldr	r4, [r4, #4]
 80008de:	e7ac      	b.n	800083a <_malloc_r+0x36>
 80008e0:	4634      	mov	r4, r6
 80008e2:	6876      	ldr	r6, [r6, #4]
 80008e4:	e7b4      	b.n	8000850 <_malloc_r+0x4c>
 80008e6:	4613      	mov	r3, r2
 80008e8:	e7cc      	b.n	8000884 <_malloc_r+0x80>
 80008ea:	230c      	movs	r3, #12
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4638      	mov	r0, r7
 80008f0:	f000 f80e 	bl	8000910 <__malloc_unlock>
 80008f4:	e797      	b.n	8000826 <_malloc_r+0x22>
 80008f6:	6025      	str	r5, [r4, #0]
 80008f8:	e7dc      	b.n	80008b4 <_malloc_r+0xb0>
 80008fa:	605b      	str	r3, [r3, #4]
 80008fc:	deff      	udf	#255	; 0xff
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098

08000904 <__malloc_lock>:
 8000904:	4801      	ldr	r0, [pc, #4]	; (800090c <__malloc_lock+0x8>)
 8000906:	f000 b843 	b.w	8000990 <__retarget_lock_acquire_recursive>
 800090a:	bf00      	nop
 800090c:	200001dc 	.word	0x200001dc

08000910 <__malloc_unlock>:
 8000910:	4801      	ldr	r0, [pc, #4]	; (8000918 <__malloc_unlock+0x8>)
 8000912:	f000 b83e 	b.w	8000992 <__retarget_lock_release_recursive>
 8000916:	bf00      	nop
 8000918:	200001dc 	.word	0x200001dc

0800091c <_sbrk_r>:
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4d06      	ldr	r5, [pc, #24]	; (8000938 <_sbrk_r+0x1c>)
 8000920:	2300      	movs	r3, #0
 8000922:	4604      	mov	r4, r0
 8000924:	4608      	mov	r0, r1
 8000926:	602b      	str	r3, [r5, #0]
 8000928:	f7ff fee4 	bl	80006f4 <_sbrk>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	d102      	bne.n	8000936 <_sbrk_r+0x1a>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b103      	cbz	r3, 8000936 <_sbrk_r+0x1a>
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	200001d8 	.word	0x200001d8

0800093c <__errno>:
 800093c:	4b01      	ldr	r3, [pc, #4]	; (8000944 <__errno+0x8>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000004c 	.word	0x2000004c

08000948 <__libc_init_array>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	4d0d      	ldr	r5, [pc, #52]	; (8000980 <__libc_init_array+0x38>)
 800094c:	4c0d      	ldr	r4, [pc, #52]	; (8000984 <__libc_init_array+0x3c>)
 800094e:	1b64      	subs	r4, r4, r5
 8000950:	10a4      	asrs	r4, r4, #2
 8000952:	2600      	movs	r6, #0
 8000954:	42a6      	cmp	r6, r4
 8000956:	d109      	bne.n	800096c <__libc_init_array+0x24>
 8000958:	4d0b      	ldr	r5, [pc, #44]	; (8000988 <__libc_init_array+0x40>)
 800095a:	4c0c      	ldr	r4, [pc, #48]	; (800098c <__libc_init_array+0x44>)
 800095c:	f000 f81a 	bl	8000994 <_init>
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	2600      	movs	r6, #0
 8000966:	42a6      	cmp	r6, r4
 8000968:	d105      	bne.n	8000976 <__libc_init_array+0x2e>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000970:	4798      	blx	r3
 8000972:	3601      	adds	r6, #1
 8000974:	e7ee      	b.n	8000954 <__libc_init_array+0xc>
 8000976:	f855 3b04 	ldr.w	r3, [r5], #4
 800097a:	4798      	blx	r3
 800097c:	3601      	adds	r6, #1
 800097e:	e7f2      	b.n	8000966 <__libc_init_array+0x1e>
 8000980:	080009ac 	.word	0x080009ac
 8000984:	080009ac 	.word	0x080009ac
 8000988:	080009ac 	.word	0x080009ac
 800098c:	080009b0 	.word	0x080009b0

08000990 <__retarget_lock_acquire_recursive>:
 8000990:	4770      	bx	lr

08000992 <__retarget_lock_release_recursive>:
 8000992:	4770      	bx	lr

08000994 <_init>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr

080009a0 <_fini>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	bf00      	nop
 80009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a6:	bc08      	pop	{r3}
 80009a8:	469e      	mov	lr, r3
 80009aa:	4770      	bx	lr
