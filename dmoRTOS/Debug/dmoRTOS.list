
dmoRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000854  08000854  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000854  08000854  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000854  08000854  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000854  08000854  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000854  08000854  00010854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800085c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000180  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   000008a9  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000589  00000000  00000000  0002096c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  00020ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c7  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000190eb  00000000  00000000  000210ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001f15  00000000  00000000  0003a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008b7dd  00000000  00000000  0003c0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005ec  00000000  00000000  000c78cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000c7eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000050 	.word	0x20000050
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800083c 	.word	0x0800083c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000054 	.word	0x20000054
 80001e4:	0800083c 	.word	0x0800083c

080001e8 <vPortTaskStackInit>:
void vPortTaskStackInit(taskcontrolblock_t *task ,int32_t programCounter);
void vPortSchedulerLaunch();
uint8_t vPortSetupTimerInterrupt();

void vPortTaskStackInit(taskcontrolblock_t *task ,int32_t programCounter)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
	task->stack[STACK_SIZE - 2] = programCounter;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	task->tcb.stackPt = &task->stack[STACK_SIZE - 16];
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	task->stack[STACK_SIZE - 1] = ( 1U << 24 ); /* PSR */
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800020c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

	task->stack[STACK_SIZE - 3] = 0x12345603;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <vPortTaskStackInit+0xa4>)
 8000214:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	task->stack[STACK_SIZE - 4] = 0x12345604;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a1d      	ldr	r2, [pc, #116]	; (8000290 <vPortTaskStackInit+0xa8>)
 800021c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	task->stack[STACK_SIZE - 5] = 0x12345605;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <vPortTaskStackInit+0xac>)
 8000224:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	task->stack[STACK_SIZE - 6] = 0x12345606;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <vPortTaskStackInit+0xb0>)
 800022c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	task->stack[STACK_SIZE - 7] = 0x12345607;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a1a      	ldr	r2, [pc, #104]	; (800029c <vPortTaskStackInit+0xb4>)
 8000234:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	task->stack[STACK_SIZE - 8] = 0x12345608;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <vPortTaskStackInit+0xb8>)
 800023c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	task->stack[STACK_SIZE - 9] = 0x12345609;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <vPortTaskStackInit+0xbc>)
 8000244:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	task->stack[STACK_SIZE - 10] = 0x12345610;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <vPortTaskStackInit+0xc0>)
 800024c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	task->stack[STACK_SIZE - 11] = 0x12345611;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a16      	ldr	r2, [pc, #88]	; (80002ac <vPortTaskStackInit+0xc4>)
 8000254:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	task->stack[STACK_SIZE - 12] = 0x12345612;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <vPortTaskStackInit+0xc8>)
 800025c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	task->stack[STACK_SIZE - 13] = 0x12345613;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <vPortTaskStackInit+0xcc>)
 8000264:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	task->stack[STACK_SIZE - 14] = 0x12345614;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <vPortTaskStackInit+0xd0>)
 800026c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	task->stack[STACK_SIZE - 15] = 0x12345615;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <vPortTaskStackInit+0xd4>)
 8000274:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	task->stack[STACK_SIZE - 16] = 0x12345616;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <vPortTaskStackInit+0xd8>)
 800027c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	12345603 	.word	0x12345603
 8000290:	12345604 	.word	0x12345604
 8000294:	12345605 	.word	0x12345605
 8000298:	12345606 	.word	0x12345606
 800029c:	12345607 	.word	0x12345607
 80002a0:	12345608 	.word	0x12345608
 80002a4:	12345609 	.word	0x12345609
 80002a8:	12345610 	.word	0x12345610
 80002ac:	12345611 	.word	0x12345611
 80002b0:	12345612 	.word	0x12345612
 80002b4:	12345613 	.word	0x12345613
 80002b8:	12345614 	.word	0x12345614
 80002bc:	12345615 	.word	0x12345615
 80002c0:	12345616 	.word	0x12345616

080002c4 <xPortTaskCreate>:

uint8_t xPortTaskCreate( void(*funcPt)(void))
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002cc:	b672      	cpsid	i
}
 80002ce:	bf00      	nop
	__disable_irq();
	taskcontrolblock_t* newTask = (taskcontrolblock_t*)malloc(sizeof(taskcontrolblock_t));
 80002d0:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 80002d4:	f000 f9c2 	bl	800065c <malloc>
 80002d8:	4603      	mov	r3, r0
 80002da:	60fb      	str	r3, [r7, #12]

	if(taskList == NULL)
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <xPortTaskCreate+0x74>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10f      	bne.n	8000304 <xPortTaskCreate+0x40>
	{
		vPortTaskStackInit(newTask, (uint32_t)(funcPt));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4619      	mov	r1, r3
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f7ff ff7d 	bl	80001e8 <vPortTaskStackInit>
		newTask->state = READY;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2200      	movs	r2, #0
 80002f2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
		newTask->nextTask = newTask;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	601a      	str	r2, [r3, #0]
		taskList = newTask;
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <xPortTaskCreate+0x74>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	e011      	b.n	8000328 <xPortTaskCreate+0x64>
	}
	else
	{
		vPortTaskStackInit(newTask, (uint32_t)(funcPt));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4619      	mov	r1, r3
 8000308:	68f8      	ldr	r0, [r7, #12]
 800030a:	f7ff ff6d 	bl	80001e8 <vPortTaskStackInit>
		newTask->state = READY;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2200      	movs	r2, #0
 8000312:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
		newTask->nextTask = taskList->nextTask;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <xPortTaskCreate+0x74>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	601a      	str	r2, [r3, #0]
		taskList->nextTask = newTask;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <xPortTaskCreate+0x74>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000328:	b662      	cpsie	i
}
 800032a:	bf00      	nop
	}

	__enable_irq();
	return 1;
 800032c:	2301      	movs	r3, #1
}
 800032e:	4618      	mov	r0, r3
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000006c 	.word	0x2000006c

0800033c <vPortSetupTimerInterrupt>:

uint8_t vPortSetupTimerInterrupt()
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	/* SysTick Timeri durdur ve temizle */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <vPortSetupTimerInterrupt+0x40>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <vPortSetupTimerInterrupt+0x44>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

	/* SysTick timer'a istenilen zamanda interrupt uretebilmesi icin load degerini yukle */
	portNVIC_SYSTICK_LOAD_REG = configQUANTA * ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <vPortSetupTimerInterrupt+0x48>)
 800034e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000352:	601a      	str	r2, [r3, #0]

	portNVIC_SYSPRI3_REG = (portNVIC_SYSPRI3_REG&0x00FFFFFF)|0xE0000000; // priority 7
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <vPortSetupTimerInterrupt+0x4c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <vPortSetupTimerInterrupt+0x4c>)
 800035e:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000362:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <vPortSetupTimerInterrupt+0x40>)
 8000366:	2207      	movs	r2, #7
 8000368:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800036a:	b662      	cpsie	i
}
 800036c:	bf00      	nop

	__enable_irq();
	return 1;
 800036e:	2301      	movs	r3, #1
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000e010 	.word	0xe000e010
 8000380:	e000e018 	.word	0xe000e018
 8000384:	e000e014 	.word	0xe000e014
 8000388:	e000ed20 	.word	0xe000ed20

0800038c <vPortSchedulerLaunch>:

void vPortSchedulerLaunch()
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	taskcontrolblock_t* temp;
	temp = taskList->nextTask;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <vPortSchedulerLaunch+0x68>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	607b      	str	r3, [r7, #4]

	do {
		temp->tcb.nextPt = &temp->nextTask->tcb;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		temp = temp->nextTask;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	607b      	str	r3, [r7, #4]
	} while (temp != taskList->nextTask);
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <vPortSchedulerLaunch+0x68>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d1ef      	bne.n	800039a <vPortSchedulerLaunch+0xe>

	currentPt = &taskList->nextTask->tcb;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <vPortSchedulerLaunch+0x68>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80003c4:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <vPortSchedulerLaunch+0x6c>)
 80003c6:	6013      	str	r3, [r2, #0]
	__asm("LDR R0,=currentPt");
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <vPortSchedulerLaunch+0x70>)
	__asm("LDR R2,[r0]");
 80003ca:	6802      	ldr	r2, [r0, #0]
	__asm("LDR SP,[R2]");
 80003cc:	f8d2 d000 	ldr.w	sp, [r2]
	__asm("POP {R4-R11}");
 80003d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("POP {R12}");
 80003d4:	f85d cb04 	ldr.w	ip, [sp], #4
	__asm("POP {R0-R3}");
 80003d8:	bc0f      	pop	{r0, r1, r2, r3}
	__asm("ADD SP,SP,#4");
 80003da:	b001      	add	sp, #4
	__asm("POP {LR}");
 80003dc:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm("ADD SP,SP,#4");
 80003e0:	b001      	add	sp, #4
	__asm("CPSIE 	I");
 80003e2:	b662      	cpsie	i

	/* Task fonksiyonuna dön */
	__asm("BX	LR");
 80003e4:	4770      	bx	lr
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2000006c 	.word	0x2000006c
 80003f8:	20000070 	.word	0x20000070
 80003fc:	20000070 	.word	0x20000070

08000400 <SysTick_Handler>:

__attribute__((naked)) void xPortSysTickHandler( void )
{
	// Kesmeleri devre dışı bırak
	__asm("CPSID I");
 8000400:	b672      	cpsid	i

	// Kaydet r4,r5,r6,r7,r8,r9,r10,r11
	__asm("PUSH {R4-R11}");
 8000402:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// R0'a currentPt'yi yükle
	__asm("LDR R0,=currentPt");
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <SysTick_Handler+0x20>)
	__asm("LDR R1,[R0]");
 8000408:	6801      	ldr	r1, [r0, #0]
	__asm("STR SP,[R1]");
 800040a:	f8c1 d000 	str.w	sp, [r1]

	// r1'i, currentPt'nin 4 byte üstündeki adres noktasından yükle, yani r1 = currentPt -> nextPt
	__asm("LDR R1,[R1,#4]");
 800040e:	6849      	ldr	r1, [r1, #4]
	__asm("STR R1,[R0]");
 8000410:	6001      	str	r1, [r0, #0]

	// SP'yi r1'den yükle
	__asm("LDR SP,[R1]");
 8000412:	f8d1 d000 	ldr.w	sp, [r1]

	// r4,r5,r6,r7,r8,r9,r10,r11'i geri yükle
	__asm("POP {R4-R11}");
 8000416:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Global kesmeleri etkinleştir
	__asm("CPSIE I");
 800041a:	b662      	cpsie	i

	// kesmeden dön
	__asm("BX LR");
 800041c:	4770      	bx	lr
}
 800041e:	bf00      	nop
 8000420:	20000070 	.word	0x20000070

08000424 <xPortSchedulerStart>:

void xPortSchedulerStart()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	vPortSetupTimerInterrupt();
 8000428:	f7ff ff88 	bl	800033c <vPortSetupTimerInterrupt>
	vPortSchedulerLaunch();
 800042c:	f7ff ffae 	bl	800038c <vPortSchedulerLaunch>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <xPortTaskYield>:

void xPortTaskYield(  )
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <xPortTaskYield+0x1c>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
	portNVIC_INTCTRL = 0x04000000;	// Trigger Systick
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <xPortTaskYield+0x20>)
 8000440:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	e000e018 	.word	0xe000e018
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <xSemaphoreCreate>:
 */
#include "semphr.h"
#include "ST/STM32F4xx/Include/stm32f407xx.h"

semaphore_t xSemaphoreCreate(int initCount)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	semaphore_t semphr;
	semphr.count = initCount;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60fb      	str	r3, [r7, #12]
}
 8000464:	bf00      	nop
 8000466:	4618      	mov	r0, r3
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <vSemaphoreTake>:

void vSemaphoreTake(semaphore_t *semphr)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
}
 800047c:	bf00      	nop
	__disable_irq();
	while( semphr->count <= 0 )
 800047e:	e003      	b.n	8000488 <vSemaphoreTake+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000484:	b662      	cpsie	i
}
 8000486:	bf00      	nop
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	ddf7      	ble.n	8000480 <vSemaphoreTake+0xe>
	{
		__disable_irq();
		__enable_irq();
	}
	semphr->count -= 1;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	1e5a      	subs	r2, r3, #1
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800049a:	b662      	cpsie	i
}
 800049c:	bf00      	nop
	__enable_irq();
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <vSemaphoreGive>:

void vSemaphoreGive(semaphore_t *semphr)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80004b2:	b672      	cpsid	i
}
 80004b4:	bf00      	nop
	__disable_irq();
	semphr->count += 1;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004c0:	b662      	cpsie	i
}
 80004c2:	bf00      	nop
	__enable_irq();
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <xTaskCreate>:
#include "task.h"
#include "portable.h"

void xTaskCreate(void(*funcPt)(void))
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	xPortTaskCreate(funcPt);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fef3 	bl	80002c4 <xPortTaskCreate>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <xTaskStartScheduler>:
void xTaskStartScheduler( void )
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
	xPortSchedulerStart();
 80004ea:	f7ff ff9b 	bl	8000424 <xPortSchedulerStart>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <xTaskYield>:

void xTaskYield(  )
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
	xPortTaskYield(  );
 80004f6:	f7ff ff9d 	bl	8000434 <xPortTaskYield>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <task0>:

semaphore_t semphr_1;


void task0(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	while(1)
	{
		vSemaphoreTake(&semphr_1);
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <task0+0x1c>)
 8000506:	f7ff ffb4 	bl	8000472 <vSemaphoreTake>
		task0_profiler++;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <task0+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <task0+0x20>)
 8000512:	6013      	str	r3, [r2, #0]
		vSemaphoreGive(&semphr_1);
 8000514:	4801      	ldr	r0, [pc, #4]	; (800051c <task0+0x1c>)
 8000516:	f7ff ffc8 	bl	80004aa <vSemaphoreGive>
		vSemaphoreTake(&semphr_1);
 800051a:	e7f3      	b.n	8000504 <task0+0x4>
 800051c:	20000080 	.word	0x20000080
 8000520:	20000074 	.word	0x20000074

08000524 <task1>:
	}
}
void task1(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	while(1)
	{
		vSemaphoreTake(&semphr_1);
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <task1+0x1c>)
 800052a:	f7ff ffa2 	bl	8000472 <vSemaphoreTake>
		task1_profiler++;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <task1+0x20>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <task1+0x20>)
 8000536:	6013      	str	r3, [r2, #0]
		vSemaphoreGive(&semphr_1);
 8000538:	4801      	ldr	r0, [pc, #4]	; (8000540 <task1+0x1c>)
 800053a:	f7ff ffb6 	bl	80004aa <vSemaphoreGive>
		vSemaphoreTake(&semphr_1);
 800053e:	e7f3      	b.n	8000528 <task1+0x4>
 8000540:	20000080 	.word	0x20000080
 8000544:	20000078 	.word	0x20000078

08000548 <task2>:
	}
}
void task2(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	while(1)
	{
		task2_profiler++;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <task2+0x14>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a02      	ldr	r2, [pc, #8]	; (800055c <task2+0x14>)
 8000554:	6013      	str	r3, [r2, #0]
		xTaskYield();
 8000556:	f7ff ffcc 	bl	80004f2 <xTaskYield>
		task2_profiler++;
 800055a:	e7f7      	b.n	800054c <task2+0x4>
 800055c:	2000007c 	.word	0x2000007c

08000560 <main>:
	}
}

int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	semphr_1 = xSemaphoreCreate(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ff77 	bl	8000458 <xSemaphoreCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <main+0x2c>)
 800056e:	6013      	str	r3, [r2, #0]

	xTaskCreate(&task0);
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0x30>)
 8000572:	f7ff ffad 	bl	80004d0 <xTaskCreate>
	xTaskCreate(&task1);
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <main+0x34>)
 8000578:	f7ff ffaa 	bl	80004d0 <xTaskCreate>
	xTaskCreate(&task2);
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <main+0x38>)
 800057e:	f7ff ffa7 	bl	80004d0 <xTaskCreate>

	xTaskStartScheduler();
 8000582:	f7ff ffb0 	bl	80004e6 <xTaskStartScheduler>
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000080 	.word	0x20000080
 8000590:	08000501 	.word	0x08000501
 8000594:	08000525 	.word	0x08000525
 8000598:	08000549 	.word	0x08000549

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f000 f90a 	bl	80007e4 <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20020000 	.word	0x20020000
 80005fc:	00000400 	.word	0x00000400
 8000600:	20000084 	.word	0x20000084
 8000604:	200001d0 	.word	0x200001d0

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f8db 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff ff91 	bl	8000560 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800064c:	0800085c 	.word	0x0800085c
  ldr r2, =_sbss
 8000650:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000654:	200001d0 	.word	0x200001d0

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <malloc>:
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <malloc+0xc>)
 800065e:	4601      	mov	r1, r0
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f000 b823 	b.w	80006ac <_malloc_r>
 8000666:	bf00      	nop
 8000668:	2000004c 	.word	0x2000004c

0800066c <sbrk_aligned>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4e0e      	ldr	r6, [pc, #56]	; (80006a8 <sbrk_aligned+0x3c>)
 8000670:	460c      	mov	r4, r1
 8000672:	6831      	ldr	r1, [r6, #0]
 8000674:	4605      	mov	r5, r0
 8000676:	b911      	cbnz	r1, 800067e <sbrk_aligned+0x12>
 8000678:	f000 f8a4 	bl	80007c4 <_sbrk_r>
 800067c:	6030      	str	r0, [r6, #0]
 800067e:	4621      	mov	r1, r4
 8000680:	4628      	mov	r0, r5
 8000682:	f000 f89f 	bl	80007c4 <_sbrk_r>
 8000686:	1c43      	adds	r3, r0, #1
 8000688:	d00a      	beq.n	80006a0 <sbrk_aligned+0x34>
 800068a:	1cc4      	adds	r4, r0, #3
 800068c:	f024 0403 	bic.w	r4, r4, #3
 8000690:	42a0      	cmp	r0, r4
 8000692:	d007      	beq.n	80006a4 <sbrk_aligned+0x38>
 8000694:	1a21      	subs	r1, r4, r0
 8000696:	4628      	mov	r0, r5
 8000698:	f000 f894 	bl	80007c4 <_sbrk_r>
 800069c:	3001      	adds	r0, #1
 800069e:	d101      	bne.n	80006a4 <sbrk_aligned+0x38>
 80006a0:	f04f 34ff 	mov.w	r4, #4294967295
 80006a4:	4620      	mov	r0, r4
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	2000008c 	.word	0x2000008c

080006ac <_malloc_r>:
 80006ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006b0:	1ccd      	adds	r5, r1, #3
 80006b2:	f025 0503 	bic.w	r5, r5, #3
 80006b6:	3508      	adds	r5, #8
 80006b8:	2d0c      	cmp	r5, #12
 80006ba:	bf38      	it	cc
 80006bc:	250c      	movcc	r5, #12
 80006be:	2d00      	cmp	r5, #0
 80006c0:	4607      	mov	r7, r0
 80006c2:	db01      	blt.n	80006c8 <_malloc_r+0x1c>
 80006c4:	42a9      	cmp	r1, r5
 80006c6:	d905      	bls.n	80006d4 <_malloc_r+0x28>
 80006c8:	230c      	movs	r3, #12
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	2600      	movs	r6, #0
 80006ce:	4630      	mov	r0, r6
 80006d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80007a8 <_malloc_r+0xfc>
 80006d8:	f000 f868 	bl	80007ac <__malloc_lock>
 80006dc:	f8d8 3000 	ldr.w	r3, [r8]
 80006e0:	461c      	mov	r4, r3
 80006e2:	bb5c      	cbnz	r4, 800073c <_malloc_r+0x90>
 80006e4:	4629      	mov	r1, r5
 80006e6:	4638      	mov	r0, r7
 80006e8:	f7ff ffc0 	bl	800066c <sbrk_aligned>
 80006ec:	1c43      	adds	r3, r0, #1
 80006ee:	4604      	mov	r4, r0
 80006f0:	d155      	bne.n	800079e <_malloc_r+0xf2>
 80006f2:	f8d8 4000 	ldr.w	r4, [r8]
 80006f6:	4626      	mov	r6, r4
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d145      	bne.n	8000788 <_malloc_r+0xdc>
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d048      	beq.n	8000792 <_malloc_r+0xe6>
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	4631      	mov	r1, r6
 8000704:	4638      	mov	r0, r7
 8000706:	eb04 0903 	add.w	r9, r4, r3
 800070a:	f000 f85b 	bl	80007c4 <_sbrk_r>
 800070e:	4581      	cmp	r9, r0
 8000710:	d13f      	bne.n	8000792 <_malloc_r+0xe6>
 8000712:	6821      	ldr	r1, [r4, #0]
 8000714:	1a6d      	subs	r5, r5, r1
 8000716:	4629      	mov	r1, r5
 8000718:	4638      	mov	r0, r7
 800071a:	f7ff ffa7 	bl	800066c <sbrk_aligned>
 800071e:	3001      	adds	r0, #1
 8000720:	d037      	beq.n	8000792 <_malloc_r+0xe6>
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	442b      	add	r3, r5
 8000726:	6023      	str	r3, [r4, #0]
 8000728:	f8d8 3000 	ldr.w	r3, [r8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d038      	beq.n	80007a2 <_malloc_r+0xf6>
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	42a2      	cmp	r2, r4
 8000734:	d12b      	bne.n	800078e <_malloc_r+0xe2>
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	e00f      	b.n	800075c <_malloc_r+0xb0>
 800073c:	6822      	ldr	r2, [r4, #0]
 800073e:	1b52      	subs	r2, r2, r5
 8000740:	d41f      	bmi.n	8000782 <_malloc_r+0xd6>
 8000742:	2a0b      	cmp	r2, #11
 8000744:	d917      	bls.n	8000776 <_malloc_r+0xca>
 8000746:	1961      	adds	r1, r4, r5
 8000748:	42a3      	cmp	r3, r4
 800074a:	6025      	str	r5, [r4, #0]
 800074c:	bf18      	it	ne
 800074e:	6059      	strne	r1, [r3, #4]
 8000750:	6863      	ldr	r3, [r4, #4]
 8000752:	bf08      	it	eq
 8000754:	f8c8 1000 	streq.w	r1, [r8]
 8000758:	5162      	str	r2, [r4, r5]
 800075a:	604b      	str	r3, [r1, #4]
 800075c:	4638      	mov	r0, r7
 800075e:	f104 060b 	add.w	r6, r4, #11
 8000762:	f000 f829 	bl	80007b8 <__malloc_unlock>
 8000766:	f026 0607 	bic.w	r6, r6, #7
 800076a:	1d23      	adds	r3, r4, #4
 800076c:	1af2      	subs	r2, r6, r3
 800076e:	d0ae      	beq.n	80006ce <_malloc_r+0x22>
 8000770:	1b9b      	subs	r3, r3, r6
 8000772:	50a3      	str	r3, [r4, r2]
 8000774:	e7ab      	b.n	80006ce <_malloc_r+0x22>
 8000776:	42a3      	cmp	r3, r4
 8000778:	6862      	ldr	r2, [r4, #4]
 800077a:	d1dd      	bne.n	8000738 <_malloc_r+0x8c>
 800077c:	f8c8 2000 	str.w	r2, [r8]
 8000780:	e7ec      	b.n	800075c <_malloc_r+0xb0>
 8000782:	4623      	mov	r3, r4
 8000784:	6864      	ldr	r4, [r4, #4]
 8000786:	e7ac      	b.n	80006e2 <_malloc_r+0x36>
 8000788:	4634      	mov	r4, r6
 800078a:	6876      	ldr	r6, [r6, #4]
 800078c:	e7b4      	b.n	80006f8 <_malloc_r+0x4c>
 800078e:	4613      	mov	r3, r2
 8000790:	e7cc      	b.n	800072c <_malloc_r+0x80>
 8000792:	230c      	movs	r3, #12
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4638      	mov	r0, r7
 8000798:	f000 f80e 	bl	80007b8 <__malloc_unlock>
 800079c:	e797      	b.n	80006ce <_malloc_r+0x22>
 800079e:	6025      	str	r5, [r4, #0]
 80007a0:	e7dc      	b.n	800075c <_malloc_r+0xb0>
 80007a2:	605b      	str	r3, [r3, #4]
 80007a4:	deff      	udf	#255	; 0xff
 80007a6:	bf00      	nop
 80007a8:	20000088 	.word	0x20000088

080007ac <__malloc_lock>:
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <__malloc_lock+0x8>)
 80007ae:	f000 b843 	b.w	8000838 <__retarget_lock_acquire_recursive>
 80007b2:	bf00      	nop
 80007b4:	200001cc 	.word	0x200001cc

080007b8 <__malloc_unlock>:
 80007b8:	4801      	ldr	r0, [pc, #4]	; (80007c0 <__malloc_unlock+0x8>)
 80007ba:	f000 b83e 	b.w	800083a <__retarget_lock_release_recursive>
 80007be:	bf00      	nop
 80007c0:	200001cc 	.word	0x200001cc

080007c4 <_sbrk_r>:
 80007c4:	b538      	push	{r3, r4, r5, lr}
 80007c6:	4d06      	ldr	r5, [pc, #24]	; (80007e0 <_sbrk_r+0x1c>)
 80007c8:	2300      	movs	r3, #0
 80007ca:	4604      	mov	r4, r0
 80007cc:	4608      	mov	r0, r1
 80007ce:	602b      	str	r3, [r5, #0]
 80007d0:	f7ff fee4 	bl	800059c <_sbrk>
 80007d4:	1c43      	adds	r3, r0, #1
 80007d6:	d102      	bne.n	80007de <_sbrk_r+0x1a>
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	b103      	cbz	r3, 80007de <_sbrk_r+0x1a>
 80007dc:	6023      	str	r3, [r4, #0]
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	200001c8 	.word	0x200001c8

080007e4 <__errno>:
 80007e4:	4b01      	ldr	r3, [pc, #4]	; (80007ec <__errno+0x8>)
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000004c 	.word	0x2000004c

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4d0d      	ldr	r5, [pc, #52]	; (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	; (800082c <__libc_init_array+0x3c>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2600      	movs	r6, #0
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4d0b      	ldr	r5, [pc, #44]	; (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	; (8000834 <__libc_init_array+0x44>)
 8000804:	f000 f81a 	bl	800083c <_init>
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2600      	movs	r6, #0
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f855 3b04 	ldr.w	r3, [r5], #4
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000854 	.word	0x08000854
 800082c:	08000854 	.word	0x08000854
 8000830:	08000854 	.word	0x08000854
 8000834:	08000858 	.word	0x08000858

08000838 <__retarget_lock_acquire_recursive>:
 8000838:	4770      	bx	lr

0800083a <__retarget_lock_release_recursive>:
 800083a:	4770      	bx	lr

0800083c <_init>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr

08000848 <_fini>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr
